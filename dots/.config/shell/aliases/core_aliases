# A collection of aliases that make life easier!
# Written by Tiger Sachse.

export TOSSED_DIR="$HOME/.tossed"
export SLATE_DIR="$HOME/slate"
export DEFAULT_GIT_USER="tgsachse"

# General navigation and visual aliases.
alias ls="ls -N --color"
alias la="ls -la -h"
alias cls="clear && ls"

# Print an error message.
print_error() {
  printf "\033[31m%s\n\033[0m" "$@"
}

# Print an info message.
print_info() {
  printf "%s\n" "$@"
}

# Go up to the next highest useful directory.
up() {

  # Attempt to go up. Return if it's impossible.
  cd ..
  if [ $? -ne 0 ]; then
    return
  fi

  # If a single jump was not requested ("-1" flag) then keep jumping if the
  # new working directory is empty.
  if [ ! "$1" = -1 ]; then
    item_count=$(find . -maxdepth 1 -not -name ".*" | wc -l)
    if [ $item_count -eq 1 -a -d "$(ls --color=none)" ]; then
      up
      return
    fi
  fi

  # Print the final directory.
  pwd

  # Print the contents of the directory if there aren't too many items to show.
  if [ $(ls -f | wc -l) -lt 64 ]; then
    ls
  else
    print_info "(too many items to display)"
  fi
}

# Go down to the next lowest useful directory.
down() {

  # Attempt to go down. Return if it's impossible.
  cd "$1"
  if [ $? -ne 0 ]; then
    return
  fi

  # If a single jump was not requested ("-1" flag) then keep jumping if the
  # new working directory is empty.
  if [ ! "$2" = -1 ]; then
    item_count=$(find . -maxdepth 1 -not -name ".*" | wc -l)
    if [ $item_count -eq 1 -a -d "$(ls --color=none)" ]; then
      down "$(ls --color=none)"
      return
    fi
  fi

  # Print the final directory.
  pwd

  # Print the git branch if the directory is a git repository.
  command -v git > /dev/null 2>&1
  if [ $? -eq 0 -a -e .git ]; then
    git branch 2>/dev/null | grep '^*' | sed 's/*/branch:/g'
  fi

  # Print the contents of the directory if there aren't too many items to show.
  if [ $(ls -f | wc -l) -lt 64 ]; then
    ls
  else
    print_info "(too many items to display)"
  fi
}

# Exit faster.
alias x="exit"

# Reload the Bash configuration file.
alias rebashrc=". $HOME/.bashrc"

# For when you're tilted.
alias fucking="sudo apt"

# Open the default editor with a short command.
# Note that this string must be wrapped in single quotes
# to avoid evaluating the argument here (before it has
# been changed in one of the main shell configuration
# scripts).
alias v='$EDITOR'

# Toss files into the rubbish bin.
toss() {
  tossed_stamped_dir="$TOSSED_DIR/$(date +%s)"
  mkdir -p "$tossed_stamped_dir"
  for item in "$@"; do
    mv "$item" "$tossed_stamped_dir"
  done
}

# Copy files to the slate.
slate() {
  mkdir -p "$SLATE_DIR"
  for item in "$@"; do
    if [ -d "$item" ]; then
      cp -r "$item" "$SLATE_DIR"
    elif [ -f "$item" ]; then
      cp "$item" "$SLATE_DIR"
    fi
  done
}

# Clean out the slate or the rubbish bin.
clean() {
  case "$1" in
    slate)
      toss "$SLATE_DIR"/*
      ;;
    tossed)
      rm -rf "$TOSSED_DIR"/*
      ;;
    *)
      echo "Please specify 'tossed' or 'slate'."
      ;;
  esac
}

# Clone Github repositories with SSH by default.
alias clone="clonessh"
alias clonehttps="_clone 'https://www.github.com/'"
alias clonessh="_clone 'git@github.com:'"
_clone() {
  domain="$1"
  if [ $# -lt 3 ]; then
    user="$DEFAULT_GIT_USER"
    repository="$2"
    shift
    shift
  else
    user="$2"
    repository="$3"
    shift
    shift
    shift
  fi

  git clone "$domain$user/$repository.git" "$@"
}

# Execute cls after goto calls.
to() {
  goto "$@"
  if [ $? -eq 0 ]; then
    case "$1" in
      -*)
        ;;
      *)
        cls
        ;;
    esac
  fi
}
